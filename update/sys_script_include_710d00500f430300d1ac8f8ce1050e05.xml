<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_133853_customer.Group</api_name>
        <client_callable>false</client_callable>
        <description>CRUD API Class for managing Group records.</description>
        <name>Group</name>
        <script><![CDATA[// =============================================================
// Author: 		    Ronald Lob
// Script Type:     [Script Include] Customer Onboarding - Group API
// Script Name:	    Customer Onboarding - Group API
// Script Version:	1.6
// Script Desc:	    API for CRUD functionality on Group table. 
//                  Differs from standard Table / REST API as it's specific to this application.
//                  Cascading of Creates / Updates / Deletes.
// ==========
// Revisions:
// ==========				
// 11/12/2017 - [Version 1.0][Ronald Lob]  	Development.
// 25/01/2018 - [Version 1.2][Ronald Lob]  	Enhanced Update functions to validate null or keywords. Added lookup feature for reference fields.
// 08/02/2018 - [Version 1.3][Ronald Lob]  	Added the AddUserToGroup function to add a user to a group.
// 20/02/2018 - [Version 1.4][Ronald Lob]  	Added the Get_Members function to return a list of Users thats members of a given Group.
// 27/02/2018 - [Version 1.5][Ronald Lob]  	Added a Deactivate function instead of a Delete.
// 09/04/2018 - [Version 1.6][Ronald Lob]  	Added the AddRoleToGroup function. Changed the Create to use ScopedTools utility. 
// =============================================================

var Group = Class.create();

Group.prototype = {
    initialize: function() {},
	
	// .. 
	// Creates a new record in Group
	// .. 
	Create: function(group_active, group_cost_center, group_default_assignee, group_description, group_email, group_manager, group_name, group_parent, group_type){
		
		gs.info('[Customer Onboarding][SI][Group.Create] Create a new Group in ServiceNow with the name: ' + group_name);
		
		// Check if the Group exists already or not. If it does we exit and let the source decide if we update or not. 
		var gr = this.Get_Name(group_name);
		gr_cc = new GlideRecord('cmn_cost_center');
		gr_da = new GlideRecord('sys_user');
		gr_m = new GlideRecord('sys_user');
		gr_p = new GlideRecord('sys_user_group');

		if (gr.isValidRecord() == true) {
			gs.info('[Customer Onboarding][SI][Group.Create] Group with the name ' + group_name + ' already exists. Exit');
			return false;
		} else {
			gs.info('[Customer Onboarding][SI][Group.Create] Group with the name ' + group_name + ' doesnt exist. Create');
		}
		
		// We need to cater for the cost center name passed as parameter and not the sys_id. 
		if (group_cost_center) {
			var gr_cc_1 = gr_cc.addQuery('sys_id',group_cost_center);
			gr_cc_1.addOrCondition('name',group_cost_center);
			gr_cc.query();
			gr_cc.next();
			
			gs.info('[Customer Onboarding][SI][Group.Create] Cost Center verified: ' + gr_cc.sys_id);
		}
		
		// We need to cater for the default assignee name passed as parameter and not the sys_id. 
		if (group_default_assignee) {
			var gr_da_1 = gr_da.addQuery('sys_id',group_default_assignee);
			gr_da_1.addOrCondition('user_name',group_default_assignee);
			gr_da.query();
			gr_da.next();
			
			gs.info('[Customer Onboarding][SI][Group.Create] Default Assignee verified: ' + gr_da.sys_id);
		}
		
		// We need to cater for the manager name passed as parameter and not the sys_id. 
		if (group_manager) {
			var gr_m_1 = gr_m.addQuery('sys_id',group_manager);
			gr_m_1.addOrCondition('user_name',group_manager);
			gr_m.query();
			gr_m.next();
			
			gs.info('[Customer Onboarding][SI][Group.Create] Manager verified: ' + gr_m.sys_id);
		}
		
		// We need to cater for the parent group name passed as parameter and not the sys_id. 
		if (group_parent) {
			var gr_p_1 = gr_p.addQuery('sys_id',group_parent);
			gr_p_1.addOrCondition('name',group_parent);
			gr_p.query();
			gr_p.next();
			
			gs.info('[Customer Onboarding][SI][Group.Create] Parent verified: ' + gr_p.sys_id);
		}
	
		// Create record
		var st = new global.ScopedTools();
		var cost_center_sys_id;
		var default_assignee_sys_id;
		var manager_sys_id;
		var parent_sys_id;
		
		if (gr_cc.isValidRecord() == true) { cost_center_sys_id = gr_cc.sys_id; }
		if (gr_da.isValidRecord() == true) { default_assignee_sys_id = gr_da.sys_id; }
		if (gr_m.isValidRecord() == true) { manager_sys_id = gr_m.sys_id; }
		if (gr_p.isValidRecord() == true) { parent_sys_id = gr_p.sys_id; }
		
		var sys_id = st.AddGroup(group_active, cost_center_sys_id, default_assignee_sys_id, group_description, group_email, manager_sys_id, group_name, parent_sys_id, group_type);

		if (sys_id) {
			gs.info('[Customer Onboarding][SI][Group.Create] New Group record created successfully: ' + sys_id);
		} else {
			gs.info('[Customer Onboarding][SI][Group.Create] New Group record not created successfully.');
			return false;
		}
		
		gr = new GlideRecord('sys_user_group');
		gr.addQuery('sys_id',sys_id);
		gr.query();
		gr.next();
		
		return gr;
	},
	
	// .. 
	// Returns a record from provided sys_id
	// .. 
	Get_SysID: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Group.Get_SysID] Get Group with sys_id = ' + sys_id);
	
		gr = new GlideRecord('sys_user_group');
		gr.addQuery('sys_id',sys_id);
		gr.query();
		gr.next();
		
		return gr;
	},
	
	// .. 
	// Returns a Group record from provided Name
	// .. 
	Get_Name: function(group_name){
		
		gs.info('[Customer Onboarding][SI][Group.Get_Name] Get Group with name = ' + group_name);
	
		gr = new GlideRecord('sys_user_group');
		gr.addQuery('name',group_name);
		gr.query();
		gr.next();

		return gr;	
	},
	
	// .. 
	// Returns an array list of Users that are members of a given Group
	// .. 
	Get_Members: function(group){
		
		gs.info('[Customer Onboarding][SI][Group.Get_Members] Get members of Group: ' + group);
	
		gr = new GlideRecord('sys_user_group');
		gr.addQuery('sys_id',group);
		gr.query();
		gr.next();

		if (gr.isValidRecord() == "true") {
			var gr_u = new GlideRecord('sys_user_grmember');
			var i = 0;
			var array = [];
			gr_u.addQuery('group',group);
			gr_u.query();
			
			while (gr_u.next()) {
				array[i] = gr_u.sys_id;
				i++;
			}
				
			return array;
				
		} else {
			gs.info('[Customer Onboarding][SI][Group.Get_Members] The provided Group sys_id: ' + group + ' could not be found. Abort.');
			return;
		}
	},
	
	// .. 
	// Deactivates an existing Group record from provided sys_id
	// .. 
	Deactivate: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Group.Deactivate] Deactivate Group with sys_id = ' + sys_id);
		
		var gr = this.Get_SysID(sys_id);
	
		if (gr.isValidRecord() == true) {
			gs.info('[Customer Onboarding][SI][Group.Deactivate] Group with sys_id = ' + sys_id + ' deactivated.');
			var bool = this.Update(gr.sys_id,"active","false");
			return bool;
		} else {
			gs.info('[Customer Onboarding][SI][Group.Deactivate] Group with sys_id = ' + sys_id + ' not found. Deactivation failed.');
			return false;
		}

	},
	
	// .. 
	// Updates one field in an existing record from provided sys_id, column name, and value
	// .. 
	Update: function(sys_id, column, value){
		
		var gr = this.Get_SysID(sys_id);
		gr_cc = new GlideRecord('cmn_cost_center');
		gr_da = new GlideRecord('sys_user');
		gr_m = new GlideRecord('sys_user');
		gr_p = new GlideRecord('sys_user_group');
		
		// Lets first check if the value passed is a keyword or null and exit or replace accordingly
		if (value == undefined || value == "") { return false;}
		if (value == "$NULL$") { value = "";}
		if (value == "$DATE$") { value = Date.today();}
		if (value == "$NOW$") { value = Date.now();}
		
		gs.info('[Customer Onboarding][SI][Group.Update] Updating Group with sys_id = ' + sys_id + ". Setting " + column + " to " + value);
		
		if (gr.isValidRecord() == true && column != "cost_center" && column != "default_assignee" && column != "parent" && column != "manager" && column != "members") {	
			gr[column] = value;
			return gr.update();

		} else if (gr.isValidRecord() == true && column == "cost_center") {
			// If we are updating cost center, we need to cater for the possibility of a sys_id or cost center name being sent
			var gr_cc_1 = gr_cc.addQuery('sys_id',value);
			gr_cc_1.addOrCondition('name',value);
			gr_cc.query();
			gr_cc.next();
			
			gr.cost_center = gr_cc.sys_id;
			
			return gr.update();
					
		} else if (gr.isValidRecord() == true && column == "default_assignee") {
			// If we are updating default assignee, we need to cater for the possibility of a sys_id or default assignee name being sent
			var gr_da_1 = gr_da.addQuery('sys_id',value);
			gr_da_1.addOrCondition('user_name',value);
			gr_da.query();
			gr_da.next();
			
			gr.default_assignee = gr_da.sys_id;
			
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "parent") {
			// If we are updating parent, we need to cater for the possibility of a sys_id or group name being sent
			var gr_p_1 = gr_p.addQuery('sys_id',value);
			gr_p_1.addOrCondition('name',value);
			gr_p.query();
			gr_p.next();
			
			gr.parent = gr_p.sys_id;
			
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "manager") {
			// If we are updating manager, we need to cater for the possibility of a sys_id or manager name being sent
			var gr_m_1 = gr_m.addQuery('sys_id',value);
			gr_m_1.addOrCondition('user_name',value);
			gr_m.query();
			gr_m.next();
			
			gr.manager = gr_m.sys_id;
			
			return gr.update();
		
		} else if (gr.isValidRecord() == true && column == "members") {
			// If column = "members" we need to handle this differently because we use list collectors.
			var str = value.toString();
			var array = str.split(",");

			for (var i = 0; i < array.length; i++) {
				gs.info('[Customer Onboarding][SI][Group.Update] Adding ' + array[i] + ' to the group ' + gr.name);
				this.AddUserToGroup(array[i],gr.sys_id);
			}
			
			return true;
			
		} else {
			gs.info('[Customer Onboarding][SI][Group.Update] Couldnt find valid record from provided Sys_ID: ' + sys_id);
			return false;
		}
		
	},
	
	// .. 
	// Adds this User to provided Group Name or Sys_ID
	// .. 
	AddUserToGroup: function(user, group){
		
		gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] Add User (' + user + ') to Group (' + group + ')');
		
		// Validate provided Users and Group 
		var user_api = new User();
		var gr_g = this.Get_SysID(group);
		var gr_u = user_api.Get_SysID(user);

		if (gr_g.isValidRecord() == false) { gr_g = this.Get_Name(group); }
		if (gr_u.isValidRecord() == false) { gr_u = user.Get_UserID(user); }

		if (gr_g.isValidRecord() == true && gr_u.isValidRecord() == true) { 
			// User and Group is valid. Relate but first check if we aren't duplicating this.
			gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] User (' + user + ') valid. Group (' + group + ') valid. Inserting.');
			
			gr = new GlideRecord('sys_user_grmember');
			gr.addQuery('user',gr_u.sys_id);
			gr.addQuery('group',gr_g.sys_id);
			gr.query();
			gr.next();

			if (gr.isValidRecord() == false) {
				// Not a duplicate, create now
				gr = new GlideRecord('sys_user_grmember');
				gr.initialize();
				gr.user = gr_u.sys_id;
				gr.group = gr_g.sys_id;
				
				var sys_id = gr.insert();
				
				if (sys_id) { gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] User (' + user + ') added to Group (' + group + '):' + sys_id); } else {
					gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] User (' + user + ') not added to Group (' + group + '). Insert Failed.');
				}
				
				return sys_id;

			} else {
				gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] User (' + user + ') already belongs to Group (' + group + '). Aborted.');	
				return false;
			}
		} else {
			gs.info('[Customer Onboarding][SI][Group.AddUserToGroup] Cannot find valid User or Group records based on provided data. Aborted.');	
			return false;
		}
	},
	
	// .. 
	// Removes this User from provided Group Name or Sys_ID
	// .. 
	RemoveUserFromGroup: function(user, group){
		
		gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] Remove User (' + user + ') from Group (' + group + ')');
		
		// Validate provided Users and Group 
		var user_api = new User();
		var gr_g = this.Get_SysID(group);
		var gr_u = user_api.Get_SysID(user);

		if (gr_g.isValidRecord() == false) { gr_g = this.Get_Name(group); }
		if (gr_u.isValidRecord() == false) { gr_u = user.Get_UserID(user); }

		if (gr_g.isValidRecord() == true && gr_u.isValidRecord() == true) { 
			// User and Group is valid. Lets check if they are actually related.
			gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] User (' + user + ') valid. Group (' + group + ') valid. Unrelating.');
			
			gr = new GlideRecord('sys_user_grmember');
			gr.addQuery('user',gr_u.sys_id);
			gr.addQuery('group',gr_g.sys_id);
			gr.query();
			gr.next();

			if (gr.isValidRecord() == true) {
				// Valid, remove
				//var bool = gr.deleteRecord();
				// We need to use the Utility class to bypass cross scope priviledges as most tables disallow deleting from other scopes.
				var tools = new global.ScopedTools();
				var bool = tools.DeleteRecord("sys_user_grmember",gr.sys_id,"DELETE");
				
				if (bool == "true") { 
					gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] User (' + user + ') removed from Group (' + group + ')');
					return true;
				} else {
					gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] User (' + user + ') not removed from Group (' + group + '). Remove Failed.');
					return false;
				}

			} else {
				gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] User (' + user + ') does not belong to Group (' + group + '). Aborted.');	
				return false;
			}
		} else {
			gs.info('[Customer Onboarding][SI][Group.RemoveUserFromGroup] Cannot find valid User or Group records based on provided data. Aborted.');	
			return false;
		}
	},
	
	// .. 
	// Adds a provided Role name or sys_id to provided Group name or Sys_ID
	// .. 
	AddRoleToGroup: function(role, group){
		
		gs.info('[Customer Onboarding][SI][Group.AddRoleToGroup] Add Role (' + role + ') to Group (' + group + ')');
		
		// Validate provided Users and Group 
		var role_api = new Role();
		var gr_g = this.Get_SysID(group);
		var gr_r = role_api.Get_SysID(role);

		if (gr_g.isValidRecord() == false) { gr_g = this.Get_Name(group); }
		if (gr_r.isValidRecord() == false) { gr_r = role_api.Get_Role(role); }

		if (gr_g.isValidRecord() == true && gr_r.isValidRecord() == true) { 
			// Role and Group is valid. Relate using Scoped Tools to cross scope permissions
			gs.info('[Customer Onboarding][SI][Group.AddRoleToGroup] Role (' + role + ') valid. Group (' + group + ') valid. Inserting.');
			
			var st = new global.ScopedTools();
			var sys_id = st.AddRoleToGroup(gr_r.sys_id,gr_g.sys_id);

			if (sys_id) { gs.info('[Customer Onboarding][SI][Group.AddRoleToGroup] Role (' + role + ') added to Group (' + group + '):' + sys_id); } else {
				gs.info('[Customer Onboarding][SI][Group.AddRoleToGroup] Role (' + role + ') not added to Group (' + group + '). Insert Failed.');
			}

			return sys_id;

		} else {
			gs.info('[Customer Onboarding][SI][Group.AddRoleToGroup] Cannot find valid Role or Group records based on provided data. Aborted.');	
		}
	},

    type: 'Group'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-11 01:18:43</sys_created_on>
        <sys_id>710d00500f430300d1ac8f8ce1050e05</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>Group</sys_name>
        <sys_package display_value="Customer Onboarding" source="x_133853_customer">fe08bfd10f020300d1ac8f8ce1050ee1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Customer Onboarding">fe08bfd10f020300d1ac8f8ce1050ee1</sys_scope>
        <sys_update_name>sys_script_include_710d00500f430300d1ac8f8ce1050e05</sys_update_name>
        <sys_updated_by>T824513@spark.co.nz</sys_updated_by>
        <sys_updated_on>2018-04-17 04:35:29</sys_updated_on>
    </sys_script_include>
</record_update>
