<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_133853_customer.Company</api_name>
        <client_callable>false</client_callable>
        <description>CRUD API Class for managing Company records.</description>
        <name>Company</name>
        <script><![CDATA[// =============================================================
// Author: 		    Ronald Lob
// Script Type:     [Script Include] Customer Onboarding - Company API
// Script Name:	    Customer Onboarding - Company API
// Script Version:	1.5
// Script Desc:	    API for CRUD functionality on Company table. 
//                  Differs from standard Table / REST API as it's specific to this application.
//                  Cascading of Creates / Updates / Deletes.
// ==========
// Revisions:
// ==========				
// 27/11/2017 - [Version 1.0][Ronald Lob]  	Development.
// 13/12/2017 - [Version 1.1][Ronald Lob]  	Added more fields in Create and deal with Location when passed as a parameter.
// 19/01/2018 - [Version 1.2][Ronald Lob]  	Enhanced Create / Update functions to accept a location / contact / and parent sys_id and name.  
// 24/01/2018 - [Version 1.3][Ronald Lob]  	Enhanced Update functions to validate null or keywords.
// 02/02/2018 - [Version 1.4][Ronald Lob]  	Fixed issues with verification assignments in Create.
// 08/08/2018 - [Version 1.5][Ronald Lob]  	Fixed issues around approval emails running this code in strict mode.
// =============================================================

var Company = Class.create();

Company.prototype = {
    initialize: function() {},
	
	// .. 
	// Creates a new record in core_company. 
	// Returns the sys_id. 
	// .. 
	Create: function(company_name, company_contact, company_latitude, company_longitude, company_customer, company_vendor, company_manufacturer, company_location, company_parent, company_website){
		
		gs.info('[Customer Onboarding][SI][Company.Create] Create a new Company in ServiceNow with the name: ' + company_name);
		
		// Check if the Company exists already or not. If it does we exit and let the source decide if we update or not. 
		var gr = this.Get_Name(company_name);
		var gr_l = new GlideRecord('cmn_location');
		var gr_p = new GlideRecord('core_company');
		var gr_c = new GlideRecord('sys_user');
		
		if (gr.isValidRecord() == true) {
			gs.info('[Customer Onboarding][SI][Company.Create] Company with the name ' + company_name + ' already exists. Exit');
			return false;
		} else {
			gs.info('[Customer Onboarding][SI][Company.Create] Company with the name ' + company_name + ' doesnt exist. Create');
		}
		
		// If a location is selected, we need to fetch the data and hard set it in the Company table (because it's not referenced for some reason)
		// We also need to cater that location name is passed as parameter 
		if (company_location) {
			var gr_l_1 = gr_l.addQuery('sys_id',company_location);
			gr_l_1.addOrCondition('name',company_location);
			gr_l.query();
			gr_l.next();
			
			gs.info('[Customer Onboarding][SI][Company.Create] Location verified: ' + gr_l.sys_id);
		}
		
		// We need to cater for the parent company name passed as parameter and not the sys_id. 
		if (company_parent) {
			var gr_p_1 = gr_p.addQuery('sys_id',company_parent);
			gr_p_1.addOrCondition('name',company_parent);
			gr_p.query();
			gr_p.next();
			
			gs.info('[Customer Onboarding][SI][Company.Create] Parent verified: ' + gr_p.sys_id);
		}
		
		// We need to cater for the contact user's user_name passed as parameter and not the sys_id. 
		if (company_contact) {
			var gr_c_1 = gr_c.addQuery('sys_id',company_contact);
			gr_c_1.addOrCondition('user_name',company_contact);
			gr_c.query();
			gr_c.next();
			
			gs.info('[Customer Onboarding][SI][Company.Create] Contact verified: ' + gr_c.sys_id);
		}
	
		// Create record
		gr = new GlideRecord('core_company');
		gr.initialize();
		gr.name = company_name;
		if (gr_c.isValidRecord() == true) { gr.contact = gr_c.sys_id; } 
		gr.latitude = company_latitude;
		gr.longitude = company_longitude;
		gr.customer = company_customer;
		gr.vendor = company_vendor;
		gr.manufacturer = company_manufacturer;
		if (gr_p.isValidRecord() == true) { gr.parent = gr_p.sys_id; }
		gr.website = company_website;
		if (gr_l.isValidRecord() == true) { gr.country = gr_l.country; }
		if (gr_l.isValidRecord() == true) { gr.city = gr_l.city; }
		if (gr_l.isValidRecord() == true) { gr.state = gr_l.state; }
		if (gr_l.isValidRecord() == true) { gr.street = gr_l.street; }
		if (gr_l.isValidRecord() == true) { gr.zip = gr_l.zip; }
		
		var sys_id = gr.insert();

		if (sys_id) {
			gs.info('[Customer Onboarding][SI][Company.Create] New Company record created successfully: ' + sys_id);
		} else {
			gs.info('[Customer Onboarding][SI][Company.Create] New Company record not created successfully: ' + sys_id);
		}
		
		return sys_id;
	},
	
	// .. 
	// Returns a record from provided sys_id
	// .. 
	Get_SysID: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Company.Get_SysID] Get Company with sys_id = ' + sys_id);
	
		var gr = new GlideRecord('core_company');
		gr.addQuery('sys_id',sys_id);
		gr.query();
		gr.next();
		
		return gr;
	},
	
	// .. 
	// Returns a Company record from provided Name
	// .. 
	Get_Name: function(company_name){
		
		gs.info('[Customer Onboarding][SI][Company.Get_Name] Get Company with name = ' + company_name);
	
		var gr = new GlideRecord('core_company');
		gr.addQuery('name',company_name);
		gr.query();
		gr.next();

		return gr;	
	},
	
	// .. 
	// Deletes an existing Company record from provided sys_id
	// .. 
	Delete: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Company.Delete] Delete Company with sys_id = ' + sys_id);
		
		// Insert code here to cascade delete Company data (Support Groups / People / Org etc.) if needed
		
		var gr = this.Get_SysID(sys_id);
		var bool;
	
		if (gr.isValidRecord() == true) {
			gr.next();
			// We need to use the Utility class to bypass cross scope priviledges as most tables disallow deleting from other scopes.
				var tools = new global.ScopedTools();
				bool = tools.DeleteRecord("core_company",gr.sys_id,"DELETE");
				
				if (bool == "true") { 
					gs.info('[Customer Onboarding][SI][Company.Delete] Company (' + gr.Name + ') has been deleted');
					return true;
				} else {
					gs.info('[Customer Onboarding][SI][Company.Delete] Company (' + gr.Name + ') has not been deleted');
					return false;
				}
		} else {
			return false;
		}

		return bool;
	},
	
	// .. 
	// Updates one field in an existing record from provided sys_id, column name, and value.
	// Validates Location / Parent / and Contact to accept alternative values.
	// .. 
	Update: function(sys_id, column, value){
		
		var gr = this.Get_SysID(sys_id);
		var gr_l = new GlideRecord('cmn_location');
		var gr_p = new GlideRecord('core_company');
		var gr_c = new GlideRecord('sys_user');
		
		// Lets first check if the value passed is a keyword or null and exit or replace accordingly
		if (value == undefined || value == "") { return false;}
		if (value == "$NULL$") { value = "";}
		if (value == "$DATE$") { value = Date.today();}
		if (value == "$NOW$") { value = Date.now();}
		
		gs.info('[Customer Onboarding][SI][Company.Update] Updating Company with sys_id = ' + sys_id + ". Setting " + column + " to " + value);
		
		if (gr.isValidRecord() == true && column != "location" && column != "parent" && column != "contact") {
			// Location not selected, so we can just update that one field.
			gr[column] = value; 
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "location") {
			// If a location is selected, we need to fetch the data and hard set it in the Company table (because it's not referenced for some reason)
			var gr_l_1 = gr_l.addQuery('sys_id',value);
			gr_l_1.addOrCondition('name',value);
			gr_l.query();
			gr_l.next();
			
			gr.country = gr_l.country;
			gr.city = gr_l.city;
			gr.state = gr_l.state;
			gr.street = gr_l.street;
			gr.zip = gr_l.zip;
			
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "parent") {
			// If we are updating parent, we need to cater for the possibility of a sys_id or company name being sent
			var gr_p_1 = gr_p.addQuery('sys_id',value);
			gr_p_1.addOrCondition('name',value);
			gr_p.query();
			gr_p.next();
			
			gr.parent = gr_p.sys_id;
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "contact") {
			// If we are updating contact, we need to cater for the possibility of a sys_id or user_name being sent
			var gr_c_1 = gr_c.addQuery('sys_id',value);
			gr_c_1.addOrCondition('user_name',value);
			gr_c.query();
			gr_c.next();
			
			gr.contact = gr_c.sys_id;
			return gr.update();
			
		} else {
			gs.info('[Customer Onboarding][SI][Company.Update] Couldnt find valid record from provided Sys_ID: ' + sys_id);
			return false;
		}
		
	},

    type: 'Company'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-11-27 02:00:01</sys_created_on>
        <sys_id>db22bbe30f220300d1ac8f8ce1050e9b</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>Company</sys_name>
        <sys_package display_value="Customer Onboarding" source="x_133853_customer">fe08bfd10f020300d1ac8f8ce1050ee1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Customer Onboarding">fe08bfd10f020300d1ac8f8ce1050ee1</sys_scope>
        <sys_update_name>sys_script_include_db22bbe30f220300d1ac8f8ce1050e9b</sys_update_name>
        <sys_updated_by>T824513@spark.co.nz</sys_updated_by>
        <sys_updated_on>2018-08-08 04:35:02</sys_updated_on>
    </sys_script_include>
</record_update>
