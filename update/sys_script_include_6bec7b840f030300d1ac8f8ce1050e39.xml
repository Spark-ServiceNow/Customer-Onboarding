<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_133853_customer.Location</api_name>
        <client_callable>false</client_callable>
        <description>CRUD API Class for managing Company records.</description>
        <name>Location</name>
        <script><![CDATA[// =============================================================
// Author: 		    Ronald Lob
// Script Type:     [Script Include] Customer Onboarding - Location API
// Script Name:	    Customer Onboarding - Location API
// Script Version:	1.4
// Script Desc:	    API for CRUD functionality on Location table. 
//                  Differs from standard Table / REST API as it's specific to this application.
//                  Cascading of Creates / Updates / Deletes.
// ==========
// Revisions:
// ==========				
// 11/12/2017 - [Version 1.0][Ronald Lob]  	Development.
// 25/01/2018 - [Version 1.2][Ronald Lob]  	Enhanced Update functions to validate null or keywords.
// 15/02/2018 - [Version 1.3][Ronald Lob]  	Fixed Create and Update containing sys_id of Country record to push just the name out. 
// 08/08/2018 - [Version 1.4][Ronald Lob]  	Fixed issues around approval emails running this code in strict mode.
// =============================================================

var Location = Class.create();

Location.prototype = {
    initialize: function() {},
	
	// .. 
	// Creates a new record in Location
	// .. 
	Create: function(location_name, location_parent, location_country, location_state, location_city, location_street, location_contact, location_company, location_latitude, location_longitude, location_stockroom){
		
		gs.info('[Customer Onboarding][SI][Location.Create] Create a new Location in ServiceNow.');
		
		// Check if the Location exists already or not
		var gr = this.Get_Name(location_name);
		var gr_p = new GlideRecord('cmn_location');
		var gr_c = new GlideRecord('core_company');
		var gr_u = new GlideRecord('sys_user');
		var gr_cy = new GlideRecord('core_country');
		
		if (gr.isValidRecord() == true) {
			gs.info('[Customer Onboarding][SI][Location.Create] Location with the name ' + location_name + ' already exists. Exit');
			return false;
		} else {
			gs.info('[Customer Onboarding][SI][Location.Create] Location with the name ' + location_name + ' doesnt exist. Create');
		}
		
		// We need to cater for the location parent name passed as parameter and not the sys_id. 
		if (location_parent) {
			var gr_p_1 = gr_p.addQuery('sys_id',location_parent);
			gr_p_1.addOrCondition('name',location_parent);
			gr_p.query();
			gr_p.next();
			
			gs.info('[Customer Onboarding][SI][Location.Create] Parent verified: ' + gr_p.sys_id);
		}
		
		// We need to cater for the location company name passed as parameter and not the sys_id. 
		if (location_company) {
			var gr_c_1 = gr_c.addQuery('sys_id',location_company);
			gr_c_1.addOrCondition('name',location_company);
			gr_c.query();
			gr_c.next();
			
			gs.info('[Customer Onboarding][SI][Location.Create] Parent verified: ' + gr_c.sys_id);
		}
		
		// We need to cater for the contact name passed as parameter and not the sys_id. 
		if (location_contact) {
			var gr_u_1 = gr_u.addQuery('sys_id',location_contact);
			gr_u_1.addOrCondition('user_name',location_contact);
			gr_u.query();
			gr_u.next();
			
			gs.info('[Customer Onboarding][SI][Location.Create] Parent verified: ' + gr_u.sys_id);
		}
		
		// We need to cater for the contact name passed as parameter and not the sys_id. 
		if (location_country) {
			var gr_cy_1 = gr_cy.addQuery('sys_id',location_country);
			gr_cy_1.addOrCondition('name',location_country);
			gr_cy.query();
			gr_cy.next();
			
			gs.info('[Customer Onboarding][SI][Location.Create] Country verified: ' + gr_cy.sys_id);
		}
	
		// Create record
		gr = new GlideRecord('cmn_location');
		gr.initialize();
		gr.name = location_name;
		if (gr_p.isValidRecord() == true) { gr.parent = gr_p.sys_id; }
		if (gr_cy.isValidRecord() == true) { gr.country = gr_cy.name; }
		gr.state = location_state;
		gr.city = location_city;
		gr.street = location_street;
		if (gr_u.isValidRecord() == true) { gr.contact = gr_u.sys_id; }
		if (gr_c.isValidRecord() == true) { gr.company = gr_c.sys_id; }
		gr.latitude = location_latitude;
		gr.longitude = location_longitude;
		gr.stock_room = location_stockroom;
		
		var sys_id = gr.insert();

		if (sys_id) {
			gs.info('[Customer Onboarding][SI][Location.Create] New Location record created successfully: ' + sys_id);
			return true;
		} else {
			gs.info('[Customer Onboarding][SI][Location.Create] New Location record not created successfully: ' + sys_id);
			return false;
		}
	},
	
	// .. 
	// Returns a record from provided sys_id
	// .. 
	Get_SysID: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Location.Get_SysID] Get Location with sys_id = ' + sys_id);
	
		var gr = new GlideRecord('cmn_location');
		gr.addQuery('sys_id',sys_id);
		gr.query();
		gr.next();
		
		return gr;
	},
	
	// .. 
	// Returns a Location record from provided Name
	// .. 
	Get_Name: function(location_name){
		
		gs.info('[Customer Onboarding][SI][Location.Get_Name] Get Location with name = ' + location_name);
	
		var gr = new GlideRecord('cmn_location');
		gr.addQuery('name',location_name);
		gr.query();
		gr.next();

		return gr;	
	},
	
	// .. 
	// Deletes an existing Location record from provided sys_id
	// .. 
	Delete: function(sys_id){
		
		gs.info('[Customer Onboarding][SI][Location.Delete] Delete Location with sys_id = ' + sys_id);
		
		var gr = this.Get_SysID(sys_id);
		var bool;
	
		if (gr.isValidRecord() == true) {
			gr.next();
			// We need to use the Utility class to bypass cross scope priviledges as most tables disallow deleting from other scopes.
				var tools = new global.ScopedTools();
				bool = tools.DeleteRecord("cmn_location",gr.sys_id,"DELETE");
				
				if (bool == "true") { 
					gs.info('[Customer Onboarding][SI][Location.Delete] Location (' + gr.Name + ') has been deleted');
					return true;
				} else {
					gs.info('[Customer Onboarding][SI][Location.Delete] Location (' + gr.Name + ') has not been deleted');
					return false;
				}
		} else {
			return false;
		}

		return bool;
	},
	
	// .. 
	// Updates one field in an existing record from provided sys_id, column name, and value
	// .. 
	Update: function(sys_id, column, value){
		
		// Check if the Location exists already or not
		var gr = this.Get_SysID(sys_id);
		var gr_p = new GlideRecord('cmn_location');
		var gr_c = new GlideRecord('core_company');
		var gr_u = new GlideRecord('sys_user');
		var gr_cy = new GlideRecord('core_country');
		
		// Lets first check if the value passed is a keyword or null and exit or replace accordingly
		if (value == undefined || value == "") { return false;}
		if (value == "$NULL$") { value = "";}
		if (value == "$DATE$") { value = Date.today();}
		if (value == "$NOW$") { value = Date.now();}
		
		gs.info('[Customer Onboarding][SI][Location.Update] Updating Location with sys_id = ' + sys_id + ". Setting " + column + " to " + value);
	
		gr = this.Get_SysID(sys_id);
		
		if (gr.isValidRecord() == true && column != "company" && column != "parent" && column != "contact" && column != "country") {	
			gr[column] = value;
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "parent") {
			// If we are updating parent, we need to cater for the possibility of a sys_id or company name being sent
			var gr_p_1 = gr_p.addQuery('sys_id',value);
			gr_p_1.addOrCondition('name',value);
			gr_p.query();
			gr_p.next();
			
			gr.parent = gr_p.sys_id;
			return gr.update();	
			
		} else if (gr.isValidRecord() == true && column == "contact") {
			// If we are updating contact, we need to cater for the possibility of a sys_id or user_name being sent
			var gr_u_1 = gr_u.addQuery('sys_id',value);
			gr_u_1.addOrCondition('user_name',value);
			gr_u.query();
			gr_u.next();
			
			gr.contact = gr_u.sys_id;
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "company") {
			// If we are updating company, we need to cater for the possibility of a sys_id or user_name being sent
			var gr_c_1 = gr_c.addQuery('sys_id',value);
			gr_c_1.addOrCondition('name',value);
			gr_c.query();
			gr_c.next();
			
			gr.company = gr_c.sys_id;
			return gr.update();
			
		} else if (gr.isValidRecord() == true && column == "country") {
			// If we are updating country, we need to cater for the possibility of a sys_id or user_name being sent and for some odd reason, Country is not a reference in Location but rather a standard String field, so we need to extract the Name from the record and duplicate it (reminds me of my Remedy days). 
			var gr_cy_1 = gr_cy.addQuery('sys_id',value);
			gr_cy_1.addOrCondition('name',value);
			gr_cy.query();
			gr_cy.next();
			
			gr.country = gr_cy.name;
			return gr.update();
			
		} else {
			gs.info('[Customer Onboarding][SI][Location.Update] Couldnt find valid record from provided Sys_ID: ' + sys_id);
			return false;
		}
		
	},

    type: 'Location'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-12-11 00:14:44</sys_created_on>
        <sys_id>6bec7b840f030300d1ac8f8ce1050e39</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>Location</sys_name>
        <sys_package display_value="Customer Onboarding" source="x_133853_customer">fe08bfd10f020300d1ac8f8ce1050ee1</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Customer Onboarding">fe08bfd10f020300d1ac8f8ce1050ee1</sys_scope>
        <sys_update_name>sys_script_include_6bec7b840f030300d1ac8f8ce1050e39</sys_update_name>
        <sys_updated_by>T824513@spark.co.nz</sys_updated_by>
        <sys_updated_on>2018-08-08 04:35:46</sys_updated_on>
    </sys_script_include>
</record_update>
