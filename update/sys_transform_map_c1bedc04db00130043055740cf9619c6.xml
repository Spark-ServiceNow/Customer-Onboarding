<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_transform_map">
    <sys_transform_map action="INSERT_OR_UPDATE">
        <active>true</active>
        <copy_empty_fields>false</copy_empty_fields>
        <enforce_mandatory_fields>No</enforce_mandatory_fields>
        <name>Record_Producer_TransformMap_Department</name>
        <order>100</order>
        <run_business_rules>true</run_business_rules>
        <run_script>true</run_script>
        <script><![CDATA[// =============================================================
// Author: 		    Ronald Lob
// Script Type:     [Transform Map] Customer Onboarding - Department Transform
// Script Name:	    Customer Onboarding - Department Transform
// Script Version:	1.0
// Script Desc:	    Transform map to make use of the CRUD API rather than standard field mappings.
//                  This allows us to unify the validation and have a single API for these creates.
//                  Only applicible to Bulk inserts or updates. Indvididual records handled with Workflow. 
// ==========
// Revisions:
// ==========				
// 29/01/2018 - [Version 1.0][Ronald Lob]  	Development.
// =============================================================

(function transformRow(source, target, map, log, isUpdate) {
	
	var department = new Department();

	gs.info('[Customer Onboarding][TM][Department] Begin Request Department Load Transform Map: ' + source.u_department_name);
	
	ignore = true; // Otherwise we create blank rows because there's no actual transform mapping
	
	// Lets check if this Department already exists based on Department Name, if it doesn't ... create. If it does ... update.
	var gr = new GlideRecord();
	gr = department.Get_Name(source.u_department_name);
	
	if (gr.isValidRecord() == true && (source.u_existing_record_found == "Insert or Update" || source.u_existing_record_found == "Update Only")) { 
		// Here we need to call the Update action because the Department name already exists and the duplicate flag is set. 
		
		gs.info('[Customer Onboarding][TM][Department] Department with the name of ' + source.u_department_name + ' already exists in ServiceNow. Updating.');
		
		// Update any changed values only
		if (gr.id != source.u_department_id) { department.Update(gr.sys_id,"id",source.u_department_id); }
		if (gr.company != source.u_company) { department.Update(gr.sys_id,"company",source.u_company); }
		if (gr.cost_center != source.u_cost_center) { department.Update(gr.sys_id,"cost_center",source.u_cost_center); }
		if (gr.parent != source.u_parent) { department.Update(gr.sys_id,"parent",source.u_parent); }
		if (gr.description != source.u_description) { department.Update(gr.sys_id,"description",source.u_description); }
		if (gr.dept_head != source.u_department_head) { department.Update(gr.sys_id,"dept_head",source.u_department_head); }
		if (gr.primary_contact != source.u_primary_contact) { department.Update(gr.sys_id,"primary_contact",source.u_primary_contact); }
		
		gs.info('[Customer Onboarding][TM][Department] Department with the name of ' + source.u_department_name + ' has been updated.');
		
	} else if (gr.isValidRecord() == false && source.u_existing_record_found != "Update Only") { // Lets Create a new Department because none exists with that name

		gs.info('[Customer Onboarding][TM][Department] No existing Department found with the name ' + source.u_department_name + '. create a new record.');
		
		var sys_id = department.Create(source.u_department_name,source.u_department_id,source.u_company,source.u_cost_center,source.u_parent,source.u_description,source.u_department_head,source.u_primary_contact);
			
		if (sys_id) {
			gs.info('[Customer Onboarding][TM][Department] ' + source.u_department_name + ' successfully created with sys_id = ' + sys_id);
			return;
		} else { 
			gs.info('[Customer Onboarding][TM][Department] ' + source.u_department_name + ' could not be created.');	
			ignore = true;
		}
		
	} else if (gr.isValidRecord() == false && source.u_existing_record_found == "Update Only" ) {
		gs.info('[Customer Onboarding][TM][Department] No existing Department found with the name ' + source.u_department_name + '. Set to Update Only. Exit');
	} else if (gr.isValidRecord() == true && source.u_existing_record_found == "Insert Only" ) {
		gs.info('[Customer Onboarding][TM][Department] Department with the name of ' + source.u_department_name + ' found. Set to Insert Only. Exit');
	}
	
})(source, target, map, log, action==="update");]]></script>
        <source_table>x_133853_customer_record_producer_importsettable_department</source_table>
        <sys_class_name>sys_transform_map</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-01-29 01:15:39</sys_created_on>
        <sys_id>c1bedc04db00130043055740cf9619c6</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Record_Producer_TransformMap_Department</sys_name>
        <sys_package display_value="Customer Onboarding" source="x_133853_customer">fe08bfd10f020300d1ac8f8ce1050ee1</sys_package>
        <sys_policy/>
        <sys_scope display_value="Customer Onboarding">fe08bfd10f020300d1ac8f8ce1050ee1</sys_scope>
        <sys_update_name>sys_transform_map_c1bedc04db00130043055740cf9619c6</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-01-29 01:15:39</sys_updated_on>
        <target_table>cmn_department</target_table>
    </sys_transform_map>
</record_update>
